{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onUserSelect","userId","useState","selectedTodo","setSelectedTodo","input","setInput","select","setSelect","filteredTodos","filter","todo","title","toLowerCase","includes","newTodos","completed","filterTodos","className","htmlFor","id","value","onChange","e","val","target","handleSelect","map","classNames","type","readOnly","onClick","prev","BASE_URL","getAllTodos","a","fetch","response","json","CurrentUser","setCurrentUserId","user","setUser","getUser","endpoint","data","useEffect","name","email","phone","App","selectedUserId","setSelectedUserId","setTodos","fetchTodos","result","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4107928c.chunk.js","sourcesContent":["import React, {\n  ChangeEvent, Dispatch,\n  SetStateAction, useState,\n} from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  onUserSelect: Dispatch<SetStateAction<number>>,\n  userId: number,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos, onUserSelect, userId,\n}) => {\n  const [selectedTodo, setSelectedTodo] = useState(false);\n  const [input, setInput] = useState('');\n  const [select, setSelect] = useState('');\n\n  // Get a new array to map, depending on Input Title\n  let filteredTodos = todos\n    .filter(todo => todo.title\n      .toLowerCase()\n      .includes(input.toLowerCase()));\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    const val = e.target.value;\n\n    setInput(val);\n  };\n\n  const handleSelect = (e: ChangeEvent<HTMLSelectElement>): void => {\n    const val = e.target.value;\n\n    setSelect(val);\n  };\n\n  // Filtered Array of Todos depending on Input & Select Option\n  const filterTodos = () => {\n    switch (select) {\n      case 'all':\n        return filteredTodos;\n\n      case 'active': {\n        filteredTodos = todos.filter(todo => todo.completed === false);\n\n        const activeTodos = filteredTodos\n          .filter(todo => todo.title\n            .toLowerCase()\n            .includes(input.toLowerCase()));\n\n        return activeTodos;\n      }\n\n      case 'completed': {\n        filteredTodos = todos.filter(todo => todo.completed === true);\n\n        const completedTodos = filteredTodos\n          .filter(todo => todo.title\n            .toLowerCase()\n            .includes(input.toLowerCase()));\n\n        return completedTodos;\n      }\n\n      default:\n        return filteredTodos;\n    }\n  };\n\n  const newTodos = filterTodos();\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <label htmlFor=\"title\">Title: </label>\n      <input\n        id=\"title\"\n        value={input}\n        onChange={handleChange}\n      />\n\n      <select onChange={(e) => handleSelect(e)}>\n        <option value=\"all\">all</option>\n        <option value=\"active\">active</option>\n        <option value=\"completed\">completed</option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {newTodos.map(todo => (\n\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed === true,\n                  'TodoList__item--unchecked':\n                    todo.completed === false,\n                },\n              )}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button button',\n                  {\n                    'TodoList__user-button--selected': (\n                      selectedTodo === true\n                      && todo.userId === userId\n                    ),\n                  },\n                )}\n                type=\"button\"\n                onClick={() => {\n                  setSelectedTodo(prev => !prev);\n                  onUserSelect(todo.userId);\n                }}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getAllTodos = async () => {\n  const response = await fetch(`${BASE_URL}/todos`);\n  const todos: Promise<Todo[]> = await response.json();\n\n  return todos;\n};\n\n// export const getUser = async (endpoint: number) => {\n//   const response = await fetch(`${BASE_URL}/users/${endpoint}`);\n//   const data: Promise<User> = await response.json();\n\n//   return data;\n\n//   // setUser(await data);\n// };\n","import React, {\n  Dispatch, SetStateAction,\n  useEffect, useState,\n} from 'react';\n\nimport { BASE_URL } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  setCurrentUserId: Dispatch<SetStateAction<number>>\n  userId: number,\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId, setCurrentUserId,\n}) => {\n  const [user, setUser] = useState<User | null>();\n\n  const getUser = async (endpoint: number) => {\n    const response = await fetch(`${BASE_URL}/users/${endpoint}`);\n    const data = await response.json();\n\n    setUser(data);\n  };\n\n  useEffect(() => {\n    if (userId) {\n      getUser(userId);\n    }\n  }, [userId]);\n\n  return (\n    <>\n      {userId === user?.id && (\n        <>\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {' '}\n                {userId}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">\n              {user?.name}\n            </h3>\n            <p className=\"CurrentUser__email\">{user?.email}</p>\n            <p className=\"CurrentUser__phone\">{user?.phone}</p>\n\n          </div>\n          <button\n            type=\"button\"\n            onClick={() => {\n              setUser(null);\n              setCurrentUserId(0);\n            }}\n          >\n            Clear\n          </button>\n        </>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      const result = await getAllTodos();\n\n      setTodos(result);\n    };\n\n    fetchTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          onUserSelect={setSelectedUserId}\n          userId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              setCurrentUserId={setSelectedUserId}\n              userId={selectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}